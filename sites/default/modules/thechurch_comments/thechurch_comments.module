<?php


/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 */
function thechurch_comments_form_comment_form_alter(&$form, &$form_state, $form_id) {
	
	// Add the Ajax Submit Function
	$form['actions']['submit']['#ajax'] = array(
		'callback' => 'thechurch_comments_ajax_callback',
		'progress' => false,
	);
	
}

/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 */
function thechurch_comments_form_comment_confirm_delete_alter(&$form, &$form_state, $form_id) {
	
	// Add the Ajax Submit Function
	$form['actions']['submit']['#ajax'] = array(
		'callback' => 'thechurch_comments_ajax_delete',
		'progress' => false,
	);
	
	// Get the Comment
	$comment = $form['#comment'];
	
	// Give the Comment a Proper, Numerical ID
	$form['#id'] = 'comment-'.$comment->cid.'-confirm-delete';
	
}

/**
 * Comments Ajax Callback.
 */
function thechurch_comments_ajax_callback($form, $form_state) {
	
	// Get rid of all of the messages that have been set
	drupal_get_messages();

	// Get the comment & node objects
	$comment = $form_state['comment'];
	$comment = comment_load($comment->cid);
	$node = $form['#node'];
	$node = node_load($node->nid);
	
	// Put all of the Ajax Commands into an array
	$commands = array();
	
	// Make sure that comment was actually loaded before proceeding. 
	if ($comment->cid && $form_state['executed']) {
	
		// Generate the Array for Drupal Render
		$comment_build = comment_view($comment, $node);
	
		// Render the Array
		$html = drupal_render($comment_build);
	
		// Place the comment above the form
		$commands[] = ajax_command_append('#comments .comment-list', $html);
	
		// Remove the text in the text field
		$commands[] = ajax_command_invoke('#comment-form textarea', 'val', array(''));
	
		// Reset the text area back to it's original height
		$commands[] = ajax_command_css('#comment-form textarea', array('height' => '32px'));
		
		
	}
	
	// Reset the textarea back to it's original color
	$commands[] = ajax_command_invoke('#comment-form', 'removeClass', array('progress'));
	
	// Return the Ajax Commands Array
	return array('#type' => 'ajax', '#commands' => $commands);
	
}

/**
 * Comments Ajax Callback.
 */
function thechurch_comments_ajax_delete($form, $form_state) {
	
	// Get rid of all of the messages that have been set
	drupal_get_messages();

	// Get the comment & node objects
	$comment = $form['#comment'];
	
	// Put all of the Ajax Commands into an array
	$commands = array();
	
	// FadeOut the deleted comment
	$commands[] = ajax_command_invoke('#comment-'.$comment->cid.' + .comment + .confirmation-wrapper', 'fadeOut');
		
	// Return the Ajax Commands Array
  return array('#type' => 'ajax', '#commands' => $commands);
	
}

/**
 * Comments Delete Link Ajax Callback.
 */
function thechurch_comments_ajax_confirm_delete_page($cid) {
	
	if ($comment = comment_load($cid)) {

    $form = drupal_get_form('comment_confirm_delete', $comment);
		
    $data = '<div class="confirmation-wrapper">'.drupal_render($form).'</div>';
  }
	
	// Put all of the Ajax Commands into an array
	$commands = array();
	
	// Fade out the Comment so the Delete Form can take Precidence
	$commands[] = ajax_command_invoke('#comment-'.$comment->cid.' + .comment', 'hide');
	
	// Append the Delete Form
	$commands[] = ajax_command_after('#comment-'.$comment->cid.' + .comment', $data, array('effect' => 'fade'));
	
	// Mark it as changed
	$commands[] = ajax_command_changed('#comment-'.$cid.' + .comment');
	
	return array('#type' => 'ajax', '#commands' => $commands);
	
}



/**
 * Implementation of hook_menu_alter().
 */
function thechurch_comments_menu_alter(&$items) {

	// Remove access to uneccessary menu itesm
  $items['comment/reply/%node']['access callback'] = false;
  $items['comment/%/view']['access callback'] = false;
  $items['comment/%']['access callback'] = false;
  unset($items['comment/%comment/edit']['access callback']);
  $items['comment/%comment/edit']['access arguments'] = array('administer comments');
  
  // Allow users to delete their own comments
  $items['comment/%/delete']['access callback'] = 'thechurch_comments_comment_access';
  $items['comment/%/delete']['access arguments'] = array('edit', 1);
  
  // Set up the Ajax Delivery of Delete Comments Link
  $items['comment/%/delete/ajax'] = $items['comment/%/delete'];
  $items['comment/%/delete/ajax']['delivery callback'] = 'ajax_deliver';
  $items['comment/%/delete/ajax']['page callback'] = 'thechurch_comments_ajax_confirm_delete_page';
  $items['comment/%/delete/ajax']['type'] = MENU_CALLBACK;

}

/**
 * Determines whether the current user has access to a particular comment.
 *
 * Authenticated users can edit their comments as long they have not been
 * replied to. This prevents people from changing or revising their statements
 * based on the replies to their posts.
 *
 * @param $op
 *   The operation that is to be performed on the comment. Only 'edit' is
 *   recognized now.
 * @param $comment
 *   The comment object.
 * @return
 *   TRUE if the current user has acces to the comment, FALSE otherwise.
 */
function thechurch_comments_comment_access($op, $cid) {

  global $user;
  
  $comment = comment_load($cid);

	
  if ($op == 'edit' && is_object($comment)) {
    return ($user->uid && $user->uid == $comment->uid && $comment->status == COMMENT_PUBLISHED && user_access('edit own comments')) || user_access('administer comments');
  } else {
  	return false;
  }
  
}
