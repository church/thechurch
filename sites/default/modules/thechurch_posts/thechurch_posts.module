<?php
// $Id$

/**
 * @file
 * A module that creates the ability to add a 'post'.
 */


/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function thechurch_posts_form_post_node_form_alter(&$form, &$form_state, $form_id) {
	
	// Define the Variables
	$tid = null;
	
	// Get the Current path, if it's a taxonomy, set that to as the taxonomy id
	if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {
			$tid = arg(2);
	}

	// if the taxonomy is null, set it to the user's city.
	if ($tid == null) {
		global $user;
		$user = user_load($user->uid);
		if (isset($user->field_city['und'][0]['tid'])) {
			$tid = $user->field_city['und'][0]['tid'];
		}
	}
	
	// Set the Field City to the Current Term id.
	$form['field_city']['und']['#default_value'][0] = $tid;
	
	// Make sure the form can only be accessed by people who have the right to create posts
	$form['#access'] = user_access('create post content');
	
	// No one should have access to the city field
	$form['field_city']['#access'] = false;
	
	// The title should be unset since it will be set later.
	unset($form['body']['und'][0]['#title']);
	
	// The form's body field should not include the default 'resizable' javascript.
	$form['body']['und'][0]['#resizable'] = FALSE;
	
	// Make the Body a Required Field
	$form['body']['und'][0]['#required'] = TRUE;
	
	// Rename the 'Submit' button to 'Share'
	$form['actions']['submit']['#value'] = 'Share';
	
	// No one should have access to the additional options
	$form['additional_settings']['#access'] = false;
	
}

/**
 * Implementation of hook_filter_info().
 */
function thechurch_posts_filter_info() {
	
	// Set up the Trim Link Filter
	$filters['filter_trimlink'] = array(
    'title' => t('Trim Well-Formed Links'), 
    'description' => t("Trims the 'http' and 'www' from well-formed links."), 
    'process callback' => 'thechurch_posts_filter_trimlink_process', 
  );
  return $filters;
}

/**
 * Implementation of hook_filter_FILTER_process().
 */
function thechurch_posts_filter_trimlink_process($text, $filter, $format, $langcode, $cache, $cache_id) {
	
	// Process the Trim Link Filter
	$text = preg_replace("/(>http:\/\/www\\.|>https:\/\/www\\.)|(>http:\/\/|>https:\/\/)/us", ">", $text);
	$text = preg_replace("/\/</us", "<", $text);
  return $text;
  
}

/**
 * Implementation of hook_node_view().
 */
function thechurch_posts_node_view($node, $view_mode, $langcode) {
	if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {
		$_GET['page'] = 200;
		$node->content['comments'] = comment_node_page_additions($node);
		unset($node->content['comments']['comments']['pager']);
		$comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
		if ($node->comment_count > $comments_per_page) {
			$items = array(
				l(t('next â€º'), 'node/'.$node->nid, array('attributes' => array('class' => 'pager-next'), 'query' => array('page' => 1))),
			);
			$node->content['comments']['comments']['pager'] = array(
				'#theme' => 'item_list',
     		'#items' => $items,
      	'#attributes' => array('class' => array('pager-next')),
    	);
		}
	}
}

/**
 * Implementation of hook_menu_alter().
 */
function thechurch_posts_menu_alter(&$items) {

	// Set up the Ajax Delivery of Delete Comments Link
  $items['node/%node/delete/ajax'] = $items['node/%node/delete'];
  $items['node/%node/delete/ajax']['delivery callback'] = 'ajax_deliver';
  $items['node/%node/delete/ajax']['page callback'] = 'thechurch_posts_ajax_confirm_delete_page';
  $items['node/%node/delete/ajax']['type'] = MENU_CALLBACK;
  
}

/**
 * Node Delete Link Ajax Callback.
 */
function thechurch_posts_ajax_confirm_delete_page($form, $node) {

	if ($node->nid) {

    $form = drupal_get_form($form, $node);
		
    $data = '<div class="delete-confirmation-wrapper">'.drupal_render($form).'</div>';
  }
  
  // Put all of the Ajax Commands into an array
	$commands = array();
	
	// Fade out the Comment so the Delete Form can take Precidence
	$commands[] = ajax_command_invoke('#node-'.$node->nid, 'hide');
	
	// Append the Delete Form
	$commands[] = ajax_command_after('#node-'.$node->nid, $data, array('effect' => 'fade'));
	
	$commands[] = ajax_command_invoke(null, "reAttach", array());
	
	// Mark it as changed
	$commands[] = ajax_command_changed('#node-'.$nid);
	
	return array('#type' => 'ajax', '#commands' => $commands);
  
}